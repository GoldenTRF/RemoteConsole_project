// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: RemoteConsole.proto

#include "RemoteConsole.pb.h"
#include "RemoteConsole.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace RemoteConsole {

static const char* AuthorizationService_method_names[] = {
  "/RemoteConsole.AuthorizationService/primaryConnection",
  "/RemoteConsole.AuthorizationService/clientAuthorization",
};

std::unique_ptr< AuthorizationService::Stub> AuthorizationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AuthorizationService::Stub> stub(new AuthorizationService::Stub(channel, options));
  return stub;
}

AuthorizationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_primaryConnection_(AuthorizationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_clientAuthorization_(AuthorizationService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AuthorizationService::Stub::primaryConnection(::grpc::ClientContext* context, const ::RemoteConsole::Empty& request, ::RemoteConsole::AuthorizationReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RemoteConsole::Empty, ::RemoteConsole::AuthorizationReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_primaryConnection_, context, request, response);
}

void AuthorizationService::Stub::async::primaryConnection(::grpc::ClientContext* context, const ::RemoteConsole::Empty* request, ::RemoteConsole::AuthorizationReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RemoteConsole::Empty, ::RemoteConsole::AuthorizationReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_primaryConnection_, context, request, response, std::move(f));
}

void AuthorizationService::Stub::async::primaryConnection(::grpc::ClientContext* context, const ::RemoteConsole::Empty* request, ::RemoteConsole::AuthorizationReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_primaryConnection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RemoteConsole::AuthorizationReply>* AuthorizationService::Stub::PrepareAsyncprimaryConnectionRaw(::grpc::ClientContext* context, const ::RemoteConsole::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RemoteConsole::AuthorizationReply, ::RemoteConsole::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_primaryConnection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RemoteConsole::AuthorizationReply>* AuthorizationService::Stub::AsyncprimaryConnectionRaw(::grpc::ClientContext* context, const ::RemoteConsole::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncprimaryConnectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AuthorizationService::Stub::clientAuthorization(::grpc::ClientContext* context, const ::RemoteConsole::AuthorizationRequest& request, ::RemoteConsole::AuthorizationReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RemoteConsole::AuthorizationRequest, ::RemoteConsole::AuthorizationReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_clientAuthorization_, context, request, response);
}

void AuthorizationService::Stub::async::clientAuthorization(::grpc::ClientContext* context, const ::RemoteConsole::AuthorizationRequest* request, ::RemoteConsole::AuthorizationReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RemoteConsole::AuthorizationRequest, ::RemoteConsole::AuthorizationReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clientAuthorization_, context, request, response, std::move(f));
}

void AuthorizationService::Stub::async::clientAuthorization(::grpc::ClientContext* context, const ::RemoteConsole::AuthorizationRequest* request, ::RemoteConsole::AuthorizationReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clientAuthorization_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RemoteConsole::AuthorizationReply>* AuthorizationService::Stub::PrepareAsyncclientAuthorizationRaw(::grpc::ClientContext* context, const ::RemoteConsole::AuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RemoteConsole::AuthorizationReply, ::RemoteConsole::AuthorizationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_clientAuthorization_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RemoteConsole::AuthorizationReply>* AuthorizationService::Stub::AsyncclientAuthorizationRaw(::grpc::ClientContext* context, const ::RemoteConsole::AuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncclientAuthorizationRaw(context, request, cq);
  result->StartCall();
  return result;
}

AuthorizationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthorizationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthorizationService::Service, ::RemoteConsole::Empty, ::RemoteConsole::AuthorizationReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AuthorizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RemoteConsole::Empty* req,
             ::RemoteConsole::AuthorizationReply* resp) {
               return service->primaryConnection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthorizationService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthorizationService::Service, ::RemoteConsole::AuthorizationRequest, ::RemoteConsole::AuthorizationReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AuthorizationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RemoteConsole::AuthorizationRequest* req,
             ::RemoteConsole::AuthorizationReply* resp) {
               return service->clientAuthorization(ctx, req, resp);
             }, this)));
}

AuthorizationService::Service::~Service() {
}

::grpc::Status AuthorizationService::Service::primaryConnection(::grpc::ServerContext* context, const ::RemoteConsole::Empty* request, ::RemoteConsole::AuthorizationReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AuthorizationService::Service::clientAuthorization(::grpc::ServerContext* context, const ::RemoteConsole::AuthorizationRequest* request, ::RemoteConsole::AuthorizationReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* EventDetectionService_method_names[] = {
  "/RemoteConsole.EventDetectionService/keyDetection",
  "/RemoteConsole.EventDetectionService/mouseDetection",
  "/RemoteConsole.EventDetectionService/clientDisconnection",
  "/RemoteConsole.EventDetectionService/connectionAlive",
};

std::unique_ptr< EventDetectionService::Stub> EventDetectionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EventDetectionService::Stub> stub(new EventDetectionService::Stub(channel, options));
  return stub;
}

EventDetectionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_keyDetection_(EventDetectionService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_mouseDetection_(EventDetectionService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_clientDisconnection_(EventDetectionService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_connectionAlive_(EventDetectionService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EventDetectionService::Stub::keyDetection(::grpc::ClientContext* context, const ::RemoteConsole::KeyEventMess& request, ::RemoteConsole::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RemoteConsole::KeyEventMess, ::RemoteConsole::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_keyDetection_, context, request, response);
}

void EventDetectionService::Stub::async::keyDetection(::grpc::ClientContext* context, const ::RemoteConsole::KeyEventMess* request, ::RemoteConsole::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RemoteConsole::KeyEventMess, ::RemoteConsole::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_keyDetection_, context, request, response, std::move(f));
}

void EventDetectionService::Stub::async::keyDetection(::grpc::ClientContext* context, const ::RemoteConsole::KeyEventMess* request, ::RemoteConsole::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_keyDetection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RemoteConsole::Empty>* EventDetectionService::Stub::PrepareAsynckeyDetectionRaw(::grpc::ClientContext* context, const ::RemoteConsole::KeyEventMess& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RemoteConsole::Empty, ::RemoteConsole::KeyEventMess, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_keyDetection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RemoteConsole::Empty>* EventDetectionService::Stub::AsynckeyDetectionRaw(::grpc::ClientContext* context, const ::RemoteConsole::KeyEventMess& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynckeyDetectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EventDetectionService::Stub::mouseDetection(::grpc::ClientContext* context, const ::RemoteConsole::MouseEventMess& request, ::RemoteConsole::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RemoteConsole::MouseEventMess, ::RemoteConsole::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_mouseDetection_, context, request, response);
}

void EventDetectionService::Stub::async::mouseDetection(::grpc::ClientContext* context, const ::RemoteConsole::MouseEventMess* request, ::RemoteConsole::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RemoteConsole::MouseEventMess, ::RemoteConsole::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_mouseDetection_, context, request, response, std::move(f));
}

void EventDetectionService::Stub::async::mouseDetection(::grpc::ClientContext* context, const ::RemoteConsole::MouseEventMess* request, ::RemoteConsole::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_mouseDetection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RemoteConsole::Empty>* EventDetectionService::Stub::PrepareAsyncmouseDetectionRaw(::grpc::ClientContext* context, const ::RemoteConsole::MouseEventMess& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RemoteConsole::Empty, ::RemoteConsole::MouseEventMess, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_mouseDetection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RemoteConsole::Empty>* EventDetectionService::Stub::AsyncmouseDetectionRaw(::grpc::ClientContext* context, const ::RemoteConsole::MouseEventMess& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmouseDetectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EventDetectionService::Stub::clientDisconnection(::grpc::ClientContext* context, const ::RemoteConsole::Empty& request, ::RemoteConsole::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RemoteConsole::Empty, ::RemoteConsole::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_clientDisconnection_, context, request, response);
}

void EventDetectionService::Stub::async::clientDisconnection(::grpc::ClientContext* context, const ::RemoteConsole::Empty* request, ::RemoteConsole::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RemoteConsole::Empty, ::RemoteConsole::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clientDisconnection_, context, request, response, std::move(f));
}

void EventDetectionService::Stub::async::clientDisconnection(::grpc::ClientContext* context, const ::RemoteConsole::Empty* request, ::RemoteConsole::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clientDisconnection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RemoteConsole::Empty>* EventDetectionService::Stub::PrepareAsyncclientDisconnectionRaw(::grpc::ClientContext* context, const ::RemoteConsole::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RemoteConsole::Empty, ::RemoteConsole::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_clientDisconnection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RemoteConsole::Empty>* EventDetectionService::Stub::AsyncclientDisconnectionRaw(::grpc::ClientContext* context, const ::RemoteConsole::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncclientDisconnectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EventDetectionService::Stub::connectionAlive(::grpc::ClientContext* context, const ::RemoteConsole::Empty& request, ::RemoteConsole::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RemoteConsole::Empty, ::RemoteConsole::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_connectionAlive_, context, request, response);
}

void EventDetectionService::Stub::async::connectionAlive(::grpc::ClientContext* context, const ::RemoteConsole::Empty* request, ::RemoteConsole::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RemoteConsole::Empty, ::RemoteConsole::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_connectionAlive_, context, request, response, std::move(f));
}

void EventDetectionService::Stub::async::connectionAlive(::grpc::ClientContext* context, const ::RemoteConsole::Empty* request, ::RemoteConsole::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_connectionAlive_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RemoteConsole::Empty>* EventDetectionService::Stub::PrepareAsyncconnectionAliveRaw(::grpc::ClientContext* context, const ::RemoteConsole::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RemoteConsole::Empty, ::RemoteConsole::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_connectionAlive_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RemoteConsole::Empty>* EventDetectionService::Stub::AsyncconnectionAliveRaw(::grpc::ClientContext* context, const ::RemoteConsole::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncconnectionAliveRaw(context, request, cq);
  result->StartCall();
  return result;
}

EventDetectionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EventDetectionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EventDetectionService::Service, ::RemoteConsole::KeyEventMess, ::RemoteConsole::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EventDetectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RemoteConsole::KeyEventMess* req,
             ::RemoteConsole::Empty* resp) {
               return service->keyDetection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EventDetectionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EventDetectionService::Service, ::RemoteConsole::MouseEventMess, ::RemoteConsole::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EventDetectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RemoteConsole::MouseEventMess* req,
             ::RemoteConsole::Empty* resp) {
               return service->mouseDetection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EventDetectionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EventDetectionService::Service, ::RemoteConsole::Empty, ::RemoteConsole::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EventDetectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RemoteConsole::Empty* req,
             ::RemoteConsole::Empty* resp) {
               return service->clientDisconnection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EventDetectionService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EventDetectionService::Service, ::RemoteConsole::Empty, ::RemoteConsole::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EventDetectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RemoteConsole::Empty* req,
             ::RemoteConsole::Empty* resp) {
               return service->connectionAlive(ctx, req, resp);
             }, this)));
}

EventDetectionService::Service::~Service() {
}

::grpc::Status EventDetectionService::Service::keyDetection(::grpc::ServerContext* context, const ::RemoteConsole::KeyEventMess* request, ::RemoteConsole::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EventDetectionService::Service::mouseDetection(::grpc::ServerContext* context, const ::RemoteConsole::MouseEventMess* request, ::RemoteConsole::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EventDetectionService::Service::clientDisconnection(::grpc::ServerContext* context, const ::RemoteConsole::Empty* request, ::RemoteConsole::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EventDetectionService::Service::connectionAlive(::grpc::ServerContext* context, const ::RemoteConsole::Empty* request, ::RemoteConsole::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ConsoleControllService_method_names[] = {
  "/RemoteConsole.ConsoleControllService/SendCharInfo",
  "/RemoteConsole.ConsoleControllService/CheckBuffer",
  "/RemoteConsole.ConsoleControllService/GetCirsorPosition",
};

std::unique_ptr< ConsoleControllService::Stub> ConsoleControllService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ConsoleControllService::Stub> stub(new ConsoleControllService::Stub(channel, options));
  return stub;
}

ConsoleControllService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendCharInfo_(ConsoleControllService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_CheckBuffer_(ConsoleControllService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCirsorPosition_(ConsoleControllService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::RemoteConsole::CharChank>* ConsoleControllService::Stub::SendCharInfoRaw(::grpc::ClientContext* context, const ::RemoteConsole::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::RemoteConsole::CharChank>::Create(channel_.get(), rpcmethod_SendCharInfo_, context, request);
}

void ConsoleControllService::Stub::async::SendCharInfo(::grpc::ClientContext* context, const ::RemoteConsole::Empty* request, ::grpc::ClientReadReactor< ::RemoteConsole::CharChank>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::RemoteConsole::CharChank>::Create(stub_->channel_.get(), stub_->rpcmethod_SendCharInfo_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::RemoteConsole::CharChank>* ConsoleControllService::Stub::AsyncSendCharInfoRaw(::grpc::ClientContext* context, const ::RemoteConsole::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::RemoteConsole::CharChank>::Create(channel_.get(), cq, rpcmethod_SendCharInfo_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::RemoteConsole::CharChank>* ConsoleControllService::Stub::PrepareAsyncSendCharInfoRaw(::grpc::ClientContext* context, const ::RemoteConsole::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::RemoteConsole::CharChank>::Create(channel_.get(), cq, rpcmethod_SendCharInfo_, context, request, false, nullptr);
}

::grpc::Status ConsoleControllService::Stub::CheckBuffer(::grpc::ClientContext* context, const ::RemoteConsole::Empty& request, ::RemoteConsole::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RemoteConsole::Empty, ::RemoteConsole::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckBuffer_, context, request, response);
}

void ConsoleControllService::Stub::async::CheckBuffer(::grpc::ClientContext* context, const ::RemoteConsole::Empty* request, ::RemoteConsole::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RemoteConsole::Empty, ::RemoteConsole::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckBuffer_, context, request, response, std::move(f));
}

void ConsoleControllService::Stub::async::CheckBuffer(::grpc::ClientContext* context, const ::RemoteConsole::Empty* request, ::RemoteConsole::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckBuffer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RemoteConsole::Empty>* ConsoleControllService::Stub::PrepareAsyncCheckBufferRaw(::grpc::ClientContext* context, const ::RemoteConsole::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RemoteConsole::Empty, ::RemoteConsole::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckBuffer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RemoteConsole::Empty>* ConsoleControllService::Stub::AsyncCheckBufferRaw(::grpc::ClientContext* context, const ::RemoteConsole::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckBufferRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConsoleControllService::Stub::GetCirsorPosition(::grpc::ClientContext* context, const ::RemoteConsole::Empty& request, ::RemoteConsole::CursorMess* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RemoteConsole::Empty, ::RemoteConsole::CursorMess, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCirsorPosition_, context, request, response);
}

void ConsoleControllService::Stub::async::GetCirsorPosition(::grpc::ClientContext* context, const ::RemoteConsole::Empty* request, ::RemoteConsole::CursorMess* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RemoteConsole::Empty, ::RemoteConsole::CursorMess, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCirsorPosition_, context, request, response, std::move(f));
}

void ConsoleControllService::Stub::async::GetCirsorPosition(::grpc::ClientContext* context, const ::RemoteConsole::Empty* request, ::RemoteConsole::CursorMess* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCirsorPosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RemoteConsole::CursorMess>* ConsoleControllService::Stub::PrepareAsyncGetCirsorPositionRaw(::grpc::ClientContext* context, const ::RemoteConsole::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RemoteConsole::CursorMess, ::RemoteConsole::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCirsorPosition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RemoteConsole::CursorMess>* ConsoleControllService::Stub::AsyncGetCirsorPositionRaw(::grpc::ClientContext* context, const ::RemoteConsole::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCirsorPositionRaw(context, request, cq);
  result->StartCall();
  return result;
}

ConsoleControllService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleControllService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ConsoleControllService::Service, ::RemoteConsole::Empty, ::RemoteConsole::CharChank>(
          [](ConsoleControllService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RemoteConsole::Empty* req,
             ::grpc::ServerWriter<::RemoteConsole::CharChank>* writer) {
               return service->SendCharInfo(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleControllService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConsoleControllService::Service, ::RemoteConsole::Empty, ::RemoteConsole::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConsoleControllService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RemoteConsole::Empty* req,
             ::RemoteConsole::Empty* resp) {
               return service->CheckBuffer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConsoleControllService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConsoleControllService::Service, ::RemoteConsole::Empty, ::RemoteConsole::CursorMess, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConsoleControllService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RemoteConsole::Empty* req,
             ::RemoteConsole::CursorMess* resp) {
               return service->GetCirsorPosition(ctx, req, resp);
             }, this)));
}

ConsoleControllService::Service::~Service() {
}

::grpc::Status ConsoleControllService::Service::SendCharInfo(::grpc::ServerContext* context, const ::RemoteConsole::Empty* request, ::grpc::ServerWriter< ::RemoteConsole::CharChank>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConsoleControllService::Service::CheckBuffer(::grpc::ServerContext* context, const ::RemoteConsole::Empty* request, ::RemoteConsole::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConsoleControllService::Service::GetCirsorPosition(::grpc::ServerContext* context, const ::RemoteConsole::Empty* request, ::RemoteConsole::CursorMess* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace RemoteConsole

