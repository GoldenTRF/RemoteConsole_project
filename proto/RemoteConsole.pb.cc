// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RemoteConsole.proto

#include "RemoteConsole.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace RemoteConsole {
PROTOBUF_CONSTEXPR AuthorizationRequest::AuthorizationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientpassword_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientlogin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AuthorizationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthorizationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthorizationRequestDefaultTypeInternal() {}
  union {
    AuthorizationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthorizationRequestDefaultTypeInternal _AuthorizationRequest_default_instance_;
PROTOBUF_CONSTEXPR AuthorizationReply::AuthorizationReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.issuccessful_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AuthorizationReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthorizationReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthorizationReplyDefaultTypeInternal() {}
  union {
    AuthorizationReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthorizationReplyDefaultTypeInternal _AuthorizationReply_default_instance_;
PROTOBUF_CONSTEXPR CharChank::CharChank(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chunk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CharChankDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharChankDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharChankDefaultTypeInternal() {}
  union {
    CharChank _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharChankDefaultTypeInternal _CharChank_default_instance_;
PROTOBUF_CONSTEXPR CursorMess::CursorMess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cursorx_)*/0
  , /*decltype(_impl_.cursory_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CursorMessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CursorMessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CursorMessDefaultTypeInternal() {}
  union {
    CursorMess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CursorMessDefaultTypeInternal _CursorMess_default_instance_;
PROTOBUF_CONSTEXPR KeyEventMess::KeyEventMess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keydown_)*/false
  , /*decltype(_impl_.wrepcount_)*/0u
  , /*decltype(_impl_.virtualkeycode_)*/0u
  , /*decltype(_impl_.virtualscancode_)*/0u
  , /*decltype(_impl_.controlkeystate_)*/0u
  , /*decltype(_impl_.unicode_char_)*/0u
  , /*decltype(_impl_.ascii_char_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KeyEventMessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyEventMessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyEventMessDefaultTypeInternal() {}
  union {
    KeyEventMess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyEventMessDefaultTypeInternal _KeyEventMess_default_instance_;
PROTOBUF_CONSTEXPR MouseEventMess::MouseEventMess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mousex_)*/0u
  , /*decltype(_impl_.mousey_)*/0u
  , /*decltype(_impl_.buttonstate_)*/0u
  , /*decltype(_impl_.controlkeystate_)*/0u
  , /*decltype(_impl_.eventflag_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MouseEventMessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MouseEventMessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MouseEventMessDefaultTypeInternal() {}
  union {
    MouseEventMess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MouseEventMessDefaultTypeInternal _MouseEventMess_default_instance_;
PROTOBUF_CONSTEXPR Empty::Empty(
    ::_pbi::ConstantInitialized) {}
struct EmptyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyDefaultTypeInternal() {}
  union {
    Empty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyDefaultTypeInternal _Empty_default_instance_;
}  // namespace RemoteConsole
static ::_pb::Metadata file_level_metadata_RemoteConsole_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_RemoteConsole_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_RemoteConsole_2eproto = nullptr;

const uint32_t TableStruct_RemoteConsole_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RemoteConsole::AuthorizationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RemoteConsole::AuthorizationRequest, _impl_.clientpassword_),
  PROTOBUF_FIELD_OFFSET(::RemoteConsole::AuthorizationRequest, _impl_.clientlogin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RemoteConsole::AuthorizationReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RemoteConsole::AuthorizationReply, _impl_.issuccessful_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RemoteConsole::CharChank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RemoteConsole::CharChank, _impl_.chunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RemoteConsole::CursorMess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RemoteConsole::CursorMess, _impl_.cursorx_),
  PROTOBUF_FIELD_OFFSET(::RemoteConsole::CursorMess, _impl_.cursory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RemoteConsole::KeyEventMess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RemoteConsole::KeyEventMess, _impl_.keydown_),
  PROTOBUF_FIELD_OFFSET(::RemoteConsole::KeyEventMess, _impl_.wrepcount_),
  PROTOBUF_FIELD_OFFSET(::RemoteConsole::KeyEventMess, _impl_.virtualkeycode_),
  PROTOBUF_FIELD_OFFSET(::RemoteConsole::KeyEventMess, _impl_.virtualscancode_),
  PROTOBUF_FIELD_OFFSET(::RemoteConsole::KeyEventMess, _impl_.controlkeystate_),
  PROTOBUF_FIELD_OFFSET(::RemoteConsole::KeyEventMess, _impl_.unicode_char_),
  PROTOBUF_FIELD_OFFSET(::RemoteConsole::KeyEventMess, _impl_.ascii_char_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RemoteConsole::MouseEventMess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RemoteConsole::MouseEventMess, _impl_.mousex_),
  PROTOBUF_FIELD_OFFSET(::RemoteConsole::MouseEventMess, _impl_.mousey_),
  PROTOBUF_FIELD_OFFSET(::RemoteConsole::MouseEventMess, _impl_.buttonstate_),
  PROTOBUF_FIELD_OFFSET(::RemoteConsole::MouseEventMess, _impl_.controlkeystate_),
  PROTOBUF_FIELD_OFFSET(::RemoteConsole::MouseEventMess, _impl_.eventflag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RemoteConsole::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::RemoteConsole::AuthorizationRequest)},
  { 8, -1, -1, sizeof(::RemoteConsole::AuthorizationReply)},
  { 15, -1, -1, sizeof(::RemoteConsole::CharChank)},
  { 22, -1, -1, sizeof(::RemoteConsole::CursorMess)},
  { 30, -1, -1, sizeof(::RemoteConsole::KeyEventMess)},
  { 43, -1, -1, sizeof(::RemoteConsole::MouseEventMess)},
  { 54, -1, -1, sizeof(::RemoteConsole::Empty)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::RemoteConsole::_AuthorizationRequest_default_instance_._instance,
  &::RemoteConsole::_AuthorizationReply_default_instance_._instance,
  &::RemoteConsole::_CharChank_default_instance_._instance,
  &::RemoteConsole::_CursorMess_default_instance_._instance,
  &::RemoteConsole::_KeyEventMess_default_instance_._instance,
  &::RemoteConsole::_MouseEventMess_default_instance_._instance,
  &::RemoteConsole::_Empty_default_instance_._instance,
};

const char descriptor_table_protodef_RemoteConsole_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023RemoteConsole.proto\022\rRemoteConsole\"C\n\024"
  "AuthorizationRequest\022\026\n\016clientPassword\030\001"
  " \001(\t\022\023\n\013clientLogin\030\002 \001(\t\"*\n\022Authorizati"
  "onReply\022\024\n\014isSuccessful\030\001 \001(\010\"\032\n\tCharCha"
  "nk\022\r\n\005chunk\030\001 \001(\014\".\n\nCursorMess\022\017\n\007curso"
  "rX\030\001 \001(\005\022\017\n\007cursorY\030\002 \001(\005\"\246\001\n\014KeyEventMe"
  "ss\022\017\n\007keyDown\030\001 \001(\010\022\021\n\twRepCount\030\002 \001(\r\022\026"
  "\n\016virtualKeyCode\030\003 \001(\r\022\027\n\017virtualScanCod"
  "e\030\004 \001(\r\022\027\n\017controlKeyState\030\005 \001(\r\022\024\n\014unic"
  "ode_char\030\006 \001(\r\022\022\n\nascii_char\030\007 \001(\r\"q\n\016Mo"
  "useEventMess\022\016\n\006mouseX\030\001 \001(\r\022\016\n\006mouseY\030\002"
  " \001(\r\022\023\n\013buttonState\030\003 \001(\r\022\027\n\017controlKeyS"
  "tate\030\004 \001(\r\022\021\n\teventFlag\030\005 \001(\r\"\007\n\005Empty2\307"
  "\001\n\024AuthorizationService\022N\n\021primaryConnec"
  "tion\022\024.RemoteConsole.Empty\032!.RemoteConso"
  "le.AuthorizationReply\"\000\022_\n\023clientAuthori"
  "zation\022#.RemoteConsole.AuthorizationRequ"
  "est\032!.RemoteConsole.AuthorizationReply\"\000"
  "2\253\002\n\025EventDetectionService\022C\n\014keyDetecti"
  "on\022\033.RemoteConsole.KeyEventMess\032\024.Remote"
  "Console.Empty\"\000\022G\n\016mouseDetection\022\035.Remo"
  "teConsole.MouseEventMess\032\024.RemoteConsole"
  ".Empty\"\000\022C\n\023clientDisconnection\022\024.Remote"
  "Console.Empty\032\024.RemoteConsole.Empty\"\000\022\?\n"
  "\017connectionAlive\022\024.RemoteConsole.Empty\032\024"
  ".RemoteConsole.Empty\"\0002\341\001\n\026ConsoleContro"
  "llService\022B\n\014SendCharInfo\022\024.RemoteConsol"
  "e.Empty\032\030.RemoteConsole.CharChank\"\0000\001\022;\n"
  "\013CheckBuffer\022\024.RemoteConsole.Empty\032\024.Rem"
  "oteConsole.Empty\"\000\022F\n\021GetCirsorPosition\022"
  "\024.RemoteConsole.Empty\032\031.RemoteConsole.Cu"
  "rsorMess\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_RemoteConsole_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_RemoteConsole_2eproto = {
    false, false, 1258, descriptor_table_protodef_RemoteConsole_2eproto,
    "RemoteConsole.proto",
    &descriptor_table_RemoteConsole_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_RemoteConsole_2eproto::offsets,
    file_level_metadata_RemoteConsole_2eproto, file_level_enum_descriptors_RemoteConsole_2eproto,
    file_level_service_descriptors_RemoteConsole_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_RemoteConsole_2eproto_getter() {
  return &descriptor_table_RemoteConsole_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_RemoteConsole_2eproto(&descriptor_table_RemoteConsole_2eproto);
namespace RemoteConsole {

// ===================================================================

class AuthorizationRequest::_Internal {
 public:
};

AuthorizationRequest::AuthorizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RemoteConsole.AuthorizationRequest)
}
AuthorizationRequest::AuthorizationRequest(const AuthorizationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AuthorizationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientpassword_){}
    , decltype(_impl_.clientlogin_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientpassword_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientpassword_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientpassword().empty()) {
    _this->_impl_.clientpassword_.Set(from._internal_clientpassword(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientlogin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientlogin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientlogin().empty()) {
    _this->_impl_.clientlogin_.Set(from._internal_clientlogin(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:RemoteConsole.AuthorizationRequest)
}

inline void AuthorizationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientpassword_){}
    , decltype(_impl_.clientlogin_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientpassword_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientpassword_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientlogin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientlogin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthorizationRequest::~AuthorizationRequest() {
  // @@protoc_insertion_point(destructor:RemoteConsole.AuthorizationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthorizationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientpassword_.Destroy();
  _impl_.clientlogin_.Destroy();
}

void AuthorizationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuthorizationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoteConsole.AuthorizationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientpassword_.ClearToEmpty();
  _impl_.clientlogin_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthorizationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string clientPassword = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clientpassword();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RemoteConsole.AuthorizationRequest.clientPassword"));
        } else
          goto handle_unusual;
        continue;
      // string clientLogin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_clientlogin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RemoteConsole.AuthorizationRequest.clientLogin"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthorizationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemoteConsole.AuthorizationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientPassword = 1;
  if (!this->_internal_clientpassword().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientpassword().data(), static_cast<int>(this->_internal_clientpassword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RemoteConsole.AuthorizationRequest.clientPassword");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientpassword(), target);
  }

  // string clientLogin = 2;
  if (!this->_internal_clientlogin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientlogin().data(), static_cast<int>(this->_internal_clientlogin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RemoteConsole.AuthorizationRequest.clientLogin");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clientlogin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoteConsole.AuthorizationRequest)
  return target;
}

size_t AuthorizationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoteConsole.AuthorizationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientPassword = 1;
  if (!this->_internal_clientpassword().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientpassword());
  }

  // string clientLogin = 2;
  if (!this->_internal_clientlogin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientlogin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthorizationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuthorizationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthorizationRequest::GetClassData() const { return &_class_data_; }


void AuthorizationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuthorizationRequest*>(&to_msg);
  auto& from = static_cast<const AuthorizationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RemoteConsole.AuthorizationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientpassword().empty()) {
    _this->_internal_set_clientpassword(from._internal_clientpassword());
  }
  if (!from._internal_clientlogin().empty()) {
    _this->_internal_set_clientlogin(from._internal_clientlogin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthorizationRequest::CopyFrom(const AuthorizationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoteConsole.AuthorizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthorizationRequest::IsInitialized() const {
  return true;
}

void AuthorizationRequest::InternalSwap(AuthorizationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientpassword_, lhs_arena,
      &other->_impl_.clientpassword_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientlogin_, lhs_arena,
      &other->_impl_.clientlogin_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthorizationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RemoteConsole_2eproto_getter, &descriptor_table_RemoteConsole_2eproto_once,
      file_level_metadata_RemoteConsole_2eproto[0]);
}

// ===================================================================

class AuthorizationReply::_Internal {
 public:
};

AuthorizationReply::AuthorizationReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RemoteConsole.AuthorizationReply)
}
AuthorizationReply::AuthorizationReply(const AuthorizationReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AuthorizationReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.issuccessful_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.issuccessful_ = from._impl_.issuccessful_;
  // @@protoc_insertion_point(copy_constructor:RemoteConsole.AuthorizationReply)
}

inline void AuthorizationReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.issuccessful_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AuthorizationReply::~AuthorizationReply() {
  // @@protoc_insertion_point(destructor:RemoteConsole.AuthorizationReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthorizationReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AuthorizationReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuthorizationReply::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoteConsole.AuthorizationReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.issuccessful_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthorizationReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isSuccessful = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.issuccessful_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthorizationReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemoteConsole.AuthorizationReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isSuccessful = 1;
  if (this->_internal_issuccessful() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_issuccessful(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoteConsole.AuthorizationReply)
  return target;
}

size_t AuthorizationReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoteConsole.AuthorizationReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isSuccessful = 1;
  if (this->_internal_issuccessful() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthorizationReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuthorizationReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthorizationReply::GetClassData() const { return &_class_data_; }


void AuthorizationReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuthorizationReply*>(&to_msg);
  auto& from = static_cast<const AuthorizationReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RemoteConsole.AuthorizationReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_issuccessful() != 0) {
    _this->_internal_set_issuccessful(from._internal_issuccessful());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthorizationReply::CopyFrom(const AuthorizationReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoteConsole.AuthorizationReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthorizationReply::IsInitialized() const {
  return true;
}

void AuthorizationReply::InternalSwap(AuthorizationReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.issuccessful_, other->_impl_.issuccessful_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthorizationReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RemoteConsole_2eproto_getter, &descriptor_table_RemoteConsole_2eproto_once,
      file_level_metadata_RemoteConsole_2eproto[1]);
}

// ===================================================================

class CharChank::_Internal {
 public:
};

CharChank::CharChank(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RemoteConsole.CharChank)
}
CharChank::CharChank(const CharChank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CharChank* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chunk_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chunk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chunk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chunk().empty()) {
    _this->_impl_.chunk_.Set(from._internal_chunk(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:RemoteConsole.CharChank)
}

inline void CharChank::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chunk_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.chunk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chunk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CharChank::~CharChank() {
  // @@protoc_insertion_point(destructor:RemoteConsole.CharChank)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CharChank::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chunk_.Destroy();
}

void CharChank::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CharChank::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoteConsole.CharChank)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chunk_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CharChank::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes chunk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chunk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CharChank::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemoteConsole.CharChank)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chunk = 1;
  if (!this->_internal_chunk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoteConsole.CharChank)
  return target;
}

size_t CharChank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoteConsole.CharChank)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chunk = 1;
  if (!this->_internal_chunk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chunk());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CharChank::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CharChank::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CharChank::GetClassData() const { return &_class_data_; }


void CharChank::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CharChank*>(&to_msg);
  auto& from = static_cast<const CharChank&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RemoteConsole.CharChank)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chunk().empty()) {
    _this->_internal_set_chunk(from._internal_chunk());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CharChank::CopyFrom(const CharChank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoteConsole.CharChank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharChank::IsInitialized() const {
  return true;
}

void CharChank::InternalSwap(CharChank* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chunk_, lhs_arena,
      &other->_impl_.chunk_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CharChank::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RemoteConsole_2eproto_getter, &descriptor_table_RemoteConsole_2eproto_once,
      file_level_metadata_RemoteConsole_2eproto[2]);
}

// ===================================================================

class CursorMess::_Internal {
 public:
};

CursorMess::CursorMess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RemoteConsole.CursorMess)
}
CursorMess::CursorMess(const CursorMess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CursorMess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cursorx_){}
    , decltype(_impl_.cursory_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cursorx_, &from._impl_.cursorx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cursory_) -
    reinterpret_cast<char*>(&_impl_.cursorx_)) + sizeof(_impl_.cursory_));
  // @@protoc_insertion_point(copy_constructor:RemoteConsole.CursorMess)
}

inline void CursorMess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cursorx_){0}
    , decltype(_impl_.cursory_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CursorMess::~CursorMess() {
  // @@protoc_insertion_point(destructor:RemoteConsole.CursorMess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CursorMess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CursorMess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CursorMess::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoteConsole.CursorMess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.cursorx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cursory_) -
      reinterpret_cast<char*>(&_impl_.cursorx_)) + sizeof(_impl_.cursory_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CursorMess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cursorX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cursorx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cursorY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cursory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CursorMess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemoteConsole.CursorMess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cursorX = 1;
  if (this->_internal_cursorx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cursorx(), target);
  }

  // int32 cursorY = 2;
  if (this->_internal_cursory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_cursory(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoteConsole.CursorMess)
  return target;
}

size_t CursorMess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoteConsole.CursorMess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cursorX = 1;
  if (this->_internal_cursorx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cursorx());
  }

  // int32 cursorY = 2;
  if (this->_internal_cursory() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cursory());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CursorMess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CursorMess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CursorMess::GetClassData() const { return &_class_data_; }


void CursorMess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CursorMess*>(&to_msg);
  auto& from = static_cast<const CursorMess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RemoteConsole.CursorMess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cursorx() != 0) {
    _this->_internal_set_cursorx(from._internal_cursorx());
  }
  if (from._internal_cursory() != 0) {
    _this->_internal_set_cursory(from._internal_cursory());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CursorMess::CopyFrom(const CursorMess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoteConsole.CursorMess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CursorMess::IsInitialized() const {
  return true;
}

void CursorMess::InternalSwap(CursorMess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CursorMess, _impl_.cursory_)
      + sizeof(CursorMess::_impl_.cursory_)
      - PROTOBUF_FIELD_OFFSET(CursorMess, _impl_.cursorx_)>(
          reinterpret_cast<char*>(&_impl_.cursorx_),
          reinterpret_cast<char*>(&other->_impl_.cursorx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CursorMess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RemoteConsole_2eproto_getter, &descriptor_table_RemoteConsole_2eproto_once,
      file_level_metadata_RemoteConsole_2eproto[3]);
}

// ===================================================================

class KeyEventMess::_Internal {
 public:
};

KeyEventMess::KeyEventMess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RemoteConsole.KeyEventMess)
}
KeyEventMess::KeyEventMess(const KeyEventMess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeyEventMess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keydown_){}
    , decltype(_impl_.wrepcount_){}
    , decltype(_impl_.virtualkeycode_){}
    , decltype(_impl_.virtualscancode_){}
    , decltype(_impl_.controlkeystate_){}
    , decltype(_impl_.unicode_char_){}
    , decltype(_impl_.ascii_char_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.keydown_, &from._impl_.keydown_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ascii_char_) -
    reinterpret_cast<char*>(&_impl_.keydown_)) + sizeof(_impl_.ascii_char_));
  // @@protoc_insertion_point(copy_constructor:RemoteConsole.KeyEventMess)
}

inline void KeyEventMess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keydown_){false}
    , decltype(_impl_.wrepcount_){0u}
    , decltype(_impl_.virtualkeycode_){0u}
    , decltype(_impl_.virtualscancode_){0u}
    , decltype(_impl_.controlkeystate_){0u}
    , decltype(_impl_.unicode_char_){0u}
    , decltype(_impl_.ascii_char_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KeyEventMess::~KeyEventMess() {
  // @@protoc_insertion_point(destructor:RemoteConsole.KeyEventMess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeyEventMess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KeyEventMess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeyEventMess::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoteConsole.KeyEventMess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.keydown_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ascii_char_) -
      reinterpret_cast<char*>(&_impl_.keydown_)) + sizeof(_impl_.ascii_char_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyEventMess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool keyDown = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.keydown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 wRepCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.wrepcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 virtualKeyCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.virtualkeycode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 virtualScanCode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.virtualscancode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 controlKeyState = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.controlkeystate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 unicode_char = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.unicode_char_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ascii_char = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.ascii_char_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyEventMess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemoteConsole.KeyEventMess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool keyDown = 1;
  if (this->_internal_keydown() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_keydown(), target);
  }

  // uint32 wRepCount = 2;
  if (this->_internal_wrepcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_wrepcount(), target);
  }

  // uint32 virtualKeyCode = 3;
  if (this->_internal_virtualkeycode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_virtualkeycode(), target);
  }

  // uint32 virtualScanCode = 4;
  if (this->_internal_virtualscancode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_virtualscancode(), target);
  }

  // uint32 controlKeyState = 5;
  if (this->_internal_controlkeystate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_controlkeystate(), target);
  }

  // uint32 unicode_char = 6;
  if (this->_internal_unicode_char() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_unicode_char(), target);
  }

  // uint32 ascii_char = 7;
  if (this->_internal_ascii_char() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_ascii_char(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoteConsole.KeyEventMess)
  return target;
}

size_t KeyEventMess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoteConsole.KeyEventMess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool keyDown = 1;
  if (this->_internal_keydown() != 0) {
    total_size += 1 + 1;
  }

  // uint32 wRepCount = 2;
  if (this->_internal_wrepcount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_wrepcount());
  }

  // uint32 virtualKeyCode = 3;
  if (this->_internal_virtualkeycode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_virtualkeycode());
  }

  // uint32 virtualScanCode = 4;
  if (this->_internal_virtualscancode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_virtualscancode());
  }

  // uint32 controlKeyState = 5;
  if (this->_internal_controlkeystate() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_controlkeystate());
  }

  // uint32 unicode_char = 6;
  if (this->_internal_unicode_char() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_unicode_char());
  }

  // uint32 ascii_char = 7;
  if (this->_internal_ascii_char() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ascii_char());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyEventMess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeyEventMess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyEventMess::GetClassData() const { return &_class_data_; }


void KeyEventMess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeyEventMess*>(&to_msg);
  auto& from = static_cast<const KeyEventMess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RemoteConsole.KeyEventMess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_keydown() != 0) {
    _this->_internal_set_keydown(from._internal_keydown());
  }
  if (from._internal_wrepcount() != 0) {
    _this->_internal_set_wrepcount(from._internal_wrepcount());
  }
  if (from._internal_virtualkeycode() != 0) {
    _this->_internal_set_virtualkeycode(from._internal_virtualkeycode());
  }
  if (from._internal_virtualscancode() != 0) {
    _this->_internal_set_virtualscancode(from._internal_virtualscancode());
  }
  if (from._internal_controlkeystate() != 0) {
    _this->_internal_set_controlkeystate(from._internal_controlkeystate());
  }
  if (from._internal_unicode_char() != 0) {
    _this->_internal_set_unicode_char(from._internal_unicode_char());
  }
  if (from._internal_ascii_char() != 0) {
    _this->_internal_set_ascii_char(from._internal_ascii_char());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyEventMess::CopyFrom(const KeyEventMess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoteConsole.KeyEventMess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyEventMess::IsInitialized() const {
  return true;
}

void KeyEventMess::InternalSwap(KeyEventMess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyEventMess, _impl_.ascii_char_)
      + sizeof(KeyEventMess::_impl_.ascii_char_)
      - PROTOBUF_FIELD_OFFSET(KeyEventMess, _impl_.keydown_)>(
          reinterpret_cast<char*>(&_impl_.keydown_),
          reinterpret_cast<char*>(&other->_impl_.keydown_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyEventMess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RemoteConsole_2eproto_getter, &descriptor_table_RemoteConsole_2eproto_once,
      file_level_metadata_RemoteConsole_2eproto[4]);
}

// ===================================================================

class MouseEventMess::_Internal {
 public:
};

MouseEventMess::MouseEventMess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RemoteConsole.MouseEventMess)
}
MouseEventMess::MouseEventMess(const MouseEventMess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MouseEventMess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mousex_){}
    , decltype(_impl_.mousey_){}
    , decltype(_impl_.buttonstate_){}
    , decltype(_impl_.controlkeystate_){}
    , decltype(_impl_.eventflag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mousex_, &from._impl_.mousex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.eventflag_) -
    reinterpret_cast<char*>(&_impl_.mousex_)) + sizeof(_impl_.eventflag_));
  // @@protoc_insertion_point(copy_constructor:RemoteConsole.MouseEventMess)
}

inline void MouseEventMess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mousex_){0u}
    , decltype(_impl_.mousey_){0u}
    , decltype(_impl_.buttonstate_){0u}
    , decltype(_impl_.controlkeystate_){0u}
    , decltype(_impl_.eventflag_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MouseEventMess::~MouseEventMess() {
  // @@protoc_insertion_point(destructor:RemoteConsole.MouseEventMess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MouseEventMess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MouseEventMess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MouseEventMess::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoteConsole.MouseEventMess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.mousex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.eventflag_) -
      reinterpret_cast<char*>(&_impl_.mousex_)) + sizeof(_impl_.eventflag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MouseEventMess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 mouseX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.mousex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mouseY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mousey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 buttonState = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.buttonstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 controlKeyState = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.controlkeystate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 eventFlag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.eventflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MouseEventMess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemoteConsole.MouseEventMess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 mouseX = 1;
  if (this->_internal_mousex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mousex(), target);
  }

  // uint32 mouseY = 2;
  if (this->_internal_mousey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mousey(), target);
  }

  // uint32 buttonState = 3;
  if (this->_internal_buttonstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_buttonstate(), target);
  }

  // uint32 controlKeyState = 4;
  if (this->_internal_controlkeystate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_controlkeystate(), target);
  }

  // uint32 eventFlag = 5;
  if (this->_internal_eventflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_eventflag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoteConsole.MouseEventMess)
  return target;
}

size_t MouseEventMess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoteConsole.MouseEventMess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 mouseX = 1;
  if (this->_internal_mousex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mousex());
  }

  // uint32 mouseY = 2;
  if (this->_internal_mousey() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mousey());
  }

  // uint32 buttonState = 3;
  if (this->_internal_buttonstate() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_buttonstate());
  }

  // uint32 controlKeyState = 4;
  if (this->_internal_controlkeystate() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_controlkeystate());
  }

  // uint32 eventFlag = 5;
  if (this->_internal_eventflag() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_eventflag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MouseEventMess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MouseEventMess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MouseEventMess::GetClassData() const { return &_class_data_; }


void MouseEventMess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MouseEventMess*>(&to_msg);
  auto& from = static_cast<const MouseEventMess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RemoteConsole.MouseEventMess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mousex() != 0) {
    _this->_internal_set_mousex(from._internal_mousex());
  }
  if (from._internal_mousey() != 0) {
    _this->_internal_set_mousey(from._internal_mousey());
  }
  if (from._internal_buttonstate() != 0) {
    _this->_internal_set_buttonstate(from._internal_buttonstate());
  }
  if (from._internal_controlkeystate() != 0) {
    _this->_internal_set_controlkeystate(from._internal_controlkeystate());
  }
  if (from._internal_eventflag() != 0) {
    _this->_internal_set_eventflag(from._internal_eventflag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MouseEventMess::CopyFrom(const MouseEventMess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoteConsole.MouseEventMess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MouseEventMess::IsInitialized() const {
  return true;
}

void MouseEventMess::InternalSwap(MouseEventMess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MouseEventMess, _impl_.eventflag_)
      + sizeof(MouseEventMess::_impl_.eventflag_)
      - PROTOBUF_FIELD_OFFSET(MouseEventMess, _impl_.mousex_)>(
          reinterpret_cast<char*>(&_impl_.mousex_),
          reinterpret_cast<char*>(&other->_impl_.mousex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MouseEventMess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RemoteConsole_2eproto_getter, &descriptor_table_RemoteConsole_2eproto_once,
      file_level_metadata_RemoteConsole_2eproto[5]);
}

// ===================================================================

class Empty::_Internal {
 public:
};

Empty::Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:RemoteConsole.Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Empty* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RemoteConsole.Empty)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Empty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Empty::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RemoteConsole_2eproto_getter, &descriptor_table_RemoteConsole_2eproto_once,
      file_level_metadata_RemoteConsole_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace RemoteConsole
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RemoteConsole::AuthorizationRequest*
Arena::CreateMaybeMessage< ::RemoteConsole::AuthorizationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RemoteConsole::AuthorizationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::RemoteConsole::AuthorizationReply*
Arena::CreateMaybeMessage< ::RemoteConsole::AuthorizationReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RemoteConsole::AuthorizationReply >(arena);
}
template<> PROTOBUF_NOINLINE ::RemoteConsole::CharChank*
Arena::CreateMaybeMessage< ::RemoteConsole::CharChank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RemoteConsole::CharChank >(arena);
}
template<> PROTOBUF_NOINLINE ::RemoteConsole::CursorMess*
Arena::CreateMaybeMessage< ::RemoteConsole::CursorMess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RemoteConsole::CursorMess >(arena);
}
template<> PROTOBUF_NOINLINE ::RemoteConsole::KeyEventMess*
Arena::CreateMaybeMessage< ::RemoteConsole::KeyEventMess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RemoteConsole::KeyEventMess >(arena);
}
template<> PROTOBUF_NOINLINE ::RemoteConsole::MouseEventMess*
Arena::CreateMaybeMessage< ::RemoteConsole::MouseEventMess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RemoteConsole::MouseEventMess >(arena);
}
template<> PROTOBUF_NOINLINE ::RemoteConsole::Empty*
Arena::CreateMaybeMessage< ::RemoteConsole::Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RemoteConsole::Empty >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
